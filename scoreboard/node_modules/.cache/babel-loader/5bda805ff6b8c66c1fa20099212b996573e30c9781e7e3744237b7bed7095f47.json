{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Home\\\\Documents\\\\sports-scoreboard\\\\scoreboard\\\\src\\\\components\\\\topLeagues\\\\topLeagues.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport \"./topLeagues.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TopLeagues = () => {\n  _s();\n  const [leagueLogos, setLeagueLogos] = useState({\n    premierleague: '',\n    seriea: '',\n    ligue1: '',\n    championsleague: '',\n    europaleague: '',\n    mls: '',\n    laliga: '',\n    bundesliga: ''\n  });\n  let leagueNames = ['Premier League', 'Champions League', 'Bundesliga', 'Europa League', 'Ligue 1', 'Serie A', 'MLS', 'LaLiga'];\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      url: 'https://api-football-v1.p.rapidapi.com/v3/leagues',\n      params: {\n        season: '2024'\n      },\n      headers: {\n        'x-rapidapi-key': '39078bce62msh6328de9fc911fbbp1f2c47jsn26c13a67abc9',\n        'x-rapidapi-host': 'api-football-v1.p.rapidapi.com'\n      }\n    };\n    const fetchData = async () => {\n      try {\n        const response = await axios.request(options);\n        const leagueData = response.data.response;\n        console.log(leagueData);\n        const getLeagueByName = (countryName, leagueName) => {\n          const filteredLeagues = leagueData.filter(idxData => {\n            return idxData.country.name === countryName && idxData.league.name.toLowerCase() == leagueName.toLowerCase();\n          });\n\n          // if (filteredLeagues) {\n\n          //     console.log(filteredLeagues[0].league.logo);\n          // }\n\n          return filteredLeagues.length > 0 ? filteredLeagues[0].league.logo : '';\n        };\n        setLeagueLogos(prevState => ({\n          ...prevState,\n          premierleague: getLeagueByName('England', 'Premier League'),\n          bundesliga: getLeagueByName('Germany', 'Bundesliga'),\n          ligue1: getLeagueByName('France', 'Ligue 1'),\n          mls: getLeagueByName('USA', 'Major League Soccer'),\n          seriea: getLeagueByName('Italy', 'Serie A'),\n          laliga: getLeagueByName('Spain', 'la liga'),\n          championsleague: getLeagueByName('World', 'UEFA Champions League'),\n          europaleague: getLeagueByName('World', 'UEFA Europa League')\n        }));\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Object.entries(leagueLogos).map(([key, value]) => {\n  //     console.log(`League: ${key}, Logo: ${value}`);\n  //   });\n  console.log(leagueLogos);\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"top-leagues\",\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: \"title-row\",\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"title\",\n          children: \"Top Leagues\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: leagueNames.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        className: \"league-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"logo-wrap\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: leagueLogos[item.toLowerCase().replace(/\\s+/g, '')],\n            className: \"logo\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"league-name\",\n          children: item\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n_s(TopLeagues, \"+gcK1k2DZMmu6uSKKG3bK3aoFNU=\");\n_c = TopLeagues;\nexport default TopLeagues;\nvar _c;\n$RefreshReg$(_c, \"TopLeagues\");","map":{"version":3,"names":["useEffect","useState","axios","jsxDEV","_jsxDEV","TopLeagues","_s","leagueLogos","setLeagueLogos","premierleague","seriea","ligue1","championsleague","europaleague","mls","laliga","bundesliga","leagueNames","options","method","url","params","season","headers","fetchData","response","request","leagueData","data","console","log","getLeagueByName","countryName","leagueName","filteredLeagues","filter","idxData","country","name","league","toLowerCase","length","logo","prevState","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","src","replace","alt","_c","$RefreshReg$"],"sources":["C:/Users/Home/Documents/sports-scoreboard/scoreboard/src/components/topLeagues/topLeagues.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./topLeagues.css\";\r\nimport axios from \"axios\";\r\nimport { get } from \"http\";\r\n\r\n\r\nconst TopLeagues = () => {\r\n\r\n    const [leagueLogos, setLeagueLogos] = useState<any>({\r\n        premierleague: '',\r\n        seriea: '',\r\n        ligue1: '',\r\n        championsleague: '',\r\n        europaleague: '',\r\n        mls: '',\r\n        laliga: '',\r\n        bundesliga: ''\r\n      });\r\n\r\n      let leagueNames = ['Premier League','Champions League', 'Bundesliga', 'Europa League', 'Ligue 1', 'Serie A' ,  'MLS', 'LaLiga'];\r\n      \r\n\r\n    useEffect(() => {\r\n\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'https://api-football-v1.p.rapidapi.com/v3/leagues',\r\n            params: {season: '2024'},\r\n            headers: {\r\n              'x-rapidapi-key': '39078bce62msh6328de9fc911fbbp1f2c47jsn26c13a67abc9',\r\n              'x-rapidapi-host': 'api-football-v1.p.rapidapi.com'\r\n            }\r\n          };\r\n\r\n          const fetchData = async () => {\r\n\r\n            try {\r\n                const response = await axios.request(options);\r\n                const leagueData = response.data.response;\r\n                console.log(leagueData);\r\n                \r\n                const getLeagueByName = (countryName: string, leagueName: string) => {\r\n                    const filteredLeagues = leagueData.filter((idxData: any) => {\r\n                        return idxData.country.name === countryName && idxData.league.name.toLowerCase() == leagueName.toLowerCase();\r\n                    });\r\n\r\n                    \r\n                    // if (filteredLeagues) {\r\n\r\n                    //     console.log(filteredLeagues[0].league.logo);\r\n                    // }\r\n\r\n                    return filteredLeagues.length > 0 ? filteredLeagues[0].league.logo : '';\r\n\r\n                }\r\n\r\n                setLeagueLogos((prevState: any) => ({\r\n                    ...prevState,\r\n                    premierleague: getLeagueByName('England', 'Premier League'),\r\n                    bundesliga: getLeagueByName('Germany', 'Bundesliga'),\r\n                    ligue1: getLeagueByName('France', 'Ligue 1'),\r\n                    mls: getLeagueByName('USA', 'Major League Soccer'),\r\n                    seriea: getLeagueByName('Italy', 'Serie A'),\r\n                    laliga: getLeagueByName('Spain', 'la liga'),\r\n                    championsleague: getLeagueByName('World', 'UEFA Champions League'),\r\n                    europaleague: getLeagueByName('World', 'UEFA Europa League')\r\n                  }));\r\n                  \r\n\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n\r\n          }\r\n          \r\n          fetchData();\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    // Object.entries(leagueLogos).map(([key, value]) => {\r\n    //     console.log(`League: ${key}, Logo: ${value}`);\r\n    //   });\r\n      console.log(leagueLogos);\r\n\r\n\r\n\r\n    return (\r\n        <table className=\"top-leagues\">\r\n            <thead>\r\n                <tr className=\"title-row\">\r\n                    <td className=\"title\" >Top Leagues</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {leagueNames.map((item, index) => (\r\n                    <tr key={index} className=\"league-row\">\r\n                        <td className=\"logo-wrap\">\r\n                            <img src={leagueLogos[item.toLowerCase().replace(/\\s+/g, '')]}  className=\"logo\" alt=\"logo\"></img>\r\n                        </td>\r\n                        <td></td>\r\n                        <td className=\"league-name\">{item}</td>\r\n                    </tr>\r\n                ))}\r\n\r\n                \r\n\r\n            </tbody>\r\n            \r\n        </table>\r\n    );\r\n}\r\n\r\nexport default TopLeagues;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}